{"version":3,"sources":["App.js","doWork.js","reportWebVitals.js","index.js"],"names":["PeerId","require","App","React","useState","state","setState","useEffect","a","doWork","libp2p","peerId","toB58String","peers","window","location","search","split","pop","querystring","parse","JSON","topic","pubsub","on","msg","console","log","subscribe","length","forEach","createFromB58String","peerStore","addressBook","set","multiaddrs","dial","setInterval","publish","Uint8Array","Buffer","from","className","stringify","Libp2p","create","addresses","listen","modules","transport","Websockets","WebRTCStar","connEncryption","NOISE","streamMuxer","Mplex","peerDiscovery","Bootstrap","Gossipsub","config","tag","enabled","list","start","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAKMA,EAASC,EAAQ,IA+DRC,IA9Df,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,KAuDb,OArDAH,IAAMI,WAAU,WAClB,sBAAC,sCAAAC,EAAA,sEAEyBC,cAFzB,uBAEQC,EAFR,EAEQA,OACDC,EAASD,EAAOC,OAAOC,cAmB1BC,EAAQ,GACPC,OAAOC,SAASC,OAAOC,MAAM,KAAKC,QAAO,EAChCC,IAAYC,MAAMN,OAAOC,SAASC,OAAOC,MAAM,KAAKC,OAA7DL,EADwC,EACxCA,MACFA,EAAQQ,KAAKD,MAAMP,IAGfS,EAAQ,gBACdZ,EAAOa,OAAOC,GAAGF,GAAO,SAACG,GACvBC,QAAQC,IAAR,UAAehB,EAAf,eAAoCc,MA9BvC,UAiCOf,EAAOa,OAAOK,UAAUN,GAjC/B,QAmCKT,EAAMgB,OACRhB,EAAMiB,QAAN,uCAAc,WAAOnB,GAAP,SAAAH,EAAA,6DACZG,EAASX,EAAO+B,oBAAoBpB,GACpCD,EAAOsB,UAAUC,YAAYC,IAAKvB,EAASD,EAAOyB,YAFtC,SAGNzB,EAAO0B,KAAKzB,GAHN,2CAAd,uDAMA0B,aAAY,WACV3B,EAAOa,OAAOe,QAAQhB,EAAO,IAAIiB,WAAWC,EAAOC,KAAK,yCACvD,KAGLnC,GAAS,SAACD,GACR,OAAO,2BAAIA,GAAX,IAAkBM,cAhDrB,2CAAD,KAmDK,IAED,qBAAK+B,UAAU,MAAf,SACE,8BAAMrB,KAAKsB,UAAUtC,EAAO,KAAM,U,oPCvD3BI,EAAM,uCAAG,4BAAAD,EAAA,sEAEGoC,IAAOC,OAAO,CAC/BC,UAAW,CAITC,OAAQ,CACN,+DACA,iEAGJC,QAAS,CACPC,UAAW,CAACC,IAAYC,KACxBC,eAAgB,CAACC,SACjBC,YAAa,CAACC,KACdC,cAAe,CAACC,KAChBlC,OAAQmC,KAEVC,OAAQ,CACNH,cAAc,eAGXC,IAAUG,IAAM,CACfC,SAAS,EACTC,KAAM,CACJ,kFACA,kFACA,kFACA,kFACA,wFA9BM,cAEZpD,EAFY,gBAqCdA,EAAOqD,QArCO,cAuCpBjD,OAAOJ,OAASA,EAvCI,kBAwCb,CAACA,WAxCY,2CAAH,sD,2QCIJsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzE,EAAA,EAAD,MAEF0E,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c6ca0c2.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { doWork } from './doWork'\nimport querystring from 'querystring'\n\nconst PeerId = require('peer-id')\nfunction App() {\n  const [state, setState] = React.useState({})\n  React.useEffect(()=>{\n(async ()=>{\n\n  const {libp2p } = await doWork();\n  const peerId = libp2p.peerId.toB58String();\n\n  // // Listen for new peers\n  // libp2p.on('peer:discovery', (peerId) => {\n  //   console.log(`Found peer ${peerId.toB58String()}`)\n  // })\n\n  // // Listen for new connections to peers\n  // libp2p.connectionManager.on('peer:connect', (connection) => {\n  //   console.log(`Connected to ${connection.remotePeer.toB58String()}`)\n  // })\n\n  // // Listen for peers disconnecting\n  // libp2p.connectionManager.on('peer:disconnect', (connection) => {\n  //   console.log(`Disconnected from ${connection.remotePeer.toB58String()}`)\n  // })\n\n \n  // const multiaddrs = libp2p.multiaddrs;\n let peers = [];\n  if (window.location.search.split(\"?\").pop()){\n    ({peers} = querystring.parse(window.location.search.split(\"?\").pop()))\n    peers = JSON.parse(peers)\n   \n  }\n  const topic = 'magical-topic'\n  libp2p.pubsub.on(topic, (msg) => {\n    console.log(`${peerId} received: `, msg)\n  })\n\n  await libp2p.pubsub.subscribe(topic)\n\n  if (peers.length){\n    peers.forEach(async (peerId)=>{\n      peerId = PeerId.createFromB58String(peerId)\n      libp2p.peerStore.addressBook.set( peerId , libp2p.multiaddrs)\n      await libp2p.dial(peerId)\n    })\n  } else {\n    setInterval(() => {\n      libp2p.pubsub.publish(topic, new Uint8Array(Buffer.from('Bird bird bird, bird is the word!')));\n    }, 1000)\n  }\n\n  setState((state)=> {\n    return {...state, peerId}\n  })\n})()\n  }, [])\n  return (\n    <div className=\"App\">\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","import Libp2p from 'libp2p'\nimport Websockets from 'libp2p-websockets'\nimport WebRTCStar from 'libp2p-webrtc-star'\nimport { NOISE } from 'libp2p-noise'\nimport Mplex from 'libp2p-mplex'\nimport Bootstrap from 'libp2p-bootstrap'\nimport Gossipsub from 'libp2p-gossipsub'\n\nexport const doWork = async ()=>{\n\n    const libp2p = await Libp2p.create({\n        addresses: {\n          // Add the signaling server address, along with our PeerId to our multiaddrs list\n          // libp2p will automatically attempt to dial to the signaling server so that it can\n          // receive inbound connections from other peers\n          listen: [\n            '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n            '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star'\n          ]\n        },\n        modules: {\n          transport: [Websockets, WebRTCStar],\n          connEncryption: [NOISE],\n          streamMuxer: [Mplex],\n          peerDiscovery: [Bootstrap],\n          pubsub: Gossipsub\n        },\n        config: {\n          peerDiscovery: {\n            // The `tag` property will be searched when creating the instance of your Peer Discovery service.\n            // The associated object, will be passed to the service when it is instantiated.\n            [Bootstrap.tag]: {\n              enabled: true,\n              list: [\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n                '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt'\n              ]\n            }\n          }\n        }\n      })\n  \n  await libp2p.start()\n\n  window.libp2p = libp2p\n  return {libp2p}\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}